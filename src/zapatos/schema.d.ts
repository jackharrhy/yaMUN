/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.6.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module "zapatos/schema" {
  import type * as db from "zapatos/db";

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary {
    version: 101;
  }

  /* === schema: public === */

  /* --- enums --- */

  /* --- tables --- */

  export namespace course_number {
    export type Table = "course_number";
    export interface Selectable {
      /**
       * **course_number.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface JSONSelectable {
      /**
       * **course_number.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface Whereable {
      /**
       * **course_number.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **course_number.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **course_number.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = "course_number_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | db.GenericSQLExpression
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Table
      | Whereable
      | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace people {
    export type Table = "people";
    export interface Selectable {
      /**
       * **people.banner_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      banner_name: string;
      /**
       * **people.display_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      display_name: string;
      /**
       * **people.campus**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      campus: string;
      /**
       * **people.department**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      department: string;
      /**
       * **people.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title: string;
      /**
       * **people.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string;
      /**
       * **people.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string;
      /**
       * **people.extension**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      extension: string;
      /**
       * **people.location**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      location: string;
      /**
       * **people.email**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      email: string;
      /**
       * **people.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
       */
      id: number;
    }
    export interface JSONSelectable {
      /**
       * **people.banner_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      banner_name: string;
      /**
       * **people.display_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      display_name: string;
      /**
       * **people.campus**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      campus: string;
      /**
       * **people.department**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      department: string;
      /**
       * **people.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title: string;
      /**
       * **people.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string;
      /**
       * **people.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string;
      /**
       * **people.extension**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      extension: string;
      /**
       * **people.location**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      location: string;
      /**
       * **people.email**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      email: string;
      /**
       * **people.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
       */
      id: number;
    }
    export interface Whereable {
      /**
       * **people.banner_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      banner_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.display_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      display_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.campus**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      campus?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.department**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      department?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.extension**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      extension?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.location**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      location?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.email**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      email?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **people.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **people.banner_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      banner_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.display_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      display_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.campus**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      campus: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.department**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      department: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.extension**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      extension: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.location**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      location: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.email**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **people.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
       */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **people.banner_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      banner_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.display_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      display_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.campus**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      campus?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.department**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      department?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.extension**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      extension?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.location**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      location?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.email**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      email?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **people.id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
       */
      id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
    }
    export type UniqueIndex = "people_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | db.GenericSQLExpression
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Table
      | Whereable
      | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace people_campus {
    export type Table = "people_campus";
    export interface Selectable {
      /**
       * **people_campus.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface JSONSelectable {
      /**
       * **people_campus.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface Whereable {
      /**
       * **people_campus.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **people_campus.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **people_campus.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = "campus_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | db.GenericSQLExpression
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Table
      | Whereable
      | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace people_department {
    export type Table = "people_department";
    export interface Selectable {
      /**
       * **people_department.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface JSONSelectable {
      /**
       * **people_department.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface Whereable {
      /**
       * **people_department.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **people_department.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **people_department.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = "department_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | db.GenericSQLExpression
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Table
      | Whereable
      | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace session {
    export type Table = "session";
    export interface Selectable {
      /**
       * **session.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface JSONSelectable {
      /**
       * **session.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface Whereable {
      /**
       * **session.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **session.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **session.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = "session_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | db.GenericSQLExpression
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Table
      | Whereable
      | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace subject {
    export type Table = "subject";
    export interface Selectable {
      /**
       * **subject.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface JSONSelectable {
      /**
       * **subject.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
    }
    export interface Whereable {
      /**
       * **subject.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **subject.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **subject.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = "subject_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | db.GenericSQLExpression
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Table
      | Whereable
      | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table =
    | course_number.Table
    | people.Table
    | people_campus.Table
    | people_department.Table
    | session.Table
    | subject.Table;
  export type Selectable =
    | course_number.Selectable
    | people.Selectable
    | people_campus.Selectable
    | people_department.Selectable
    | session.Selectable
    | subject.Selectable;
  export type JSONSelectable =
    | course_number.JSONSelectable
    | people.JSONSelectable
    | people_campus.JSONSelectable
    | people_department.JSONSelectable
    | session.JSONSelectable
    | subject.JSONSelectable;
  export type Whereable =
    | course_number.Whereable
    | people.Whereable
    | people_campus.Whereable
    | people_department.Whereable
    | session.Whereable
    | subject.Whereable;
  export type Insertable =
    | course_number.Insertable
    | people.Insertable
    | people_campus.Insertable
    | people_department.Insertable
    | session.Insertable
    | subject.Insertable;
  export type Updatable =
    | course_number.Updatable
    | people.Updatable
    | people_campus.Updatable
    | people_department.Updatable
    | session.Updatable
    | subject.Updatable;
  export type UniqueIndex =
    | course_number.UniqueIndex
    | people.UniqueIndex
    | people_campus.UniqueIndex
    | people_department.UniqueIndex
    | session.UniqueIndex
    | subject.UniqueIndex;
  export type Column =
    | course_number.Column
    | people.Column
    | people_campus.Column
    | people_department.Column
    | session.Column
    | subject.Column;
  export type AllTables = [
    course_number.Table,
    people.Table,
    people_campus.Table,
    people_department.Table,
    session.Table,
    subject.Table
  ];
  export type AllMaterializedViews = [];

  export type SelectableForTable<T extends Table> = {
    course_number: course_number.Selectable;
    people: people.Selectable;
    people_campus: people_campus.Selectable;
    people_department: people_department.Selectable;
    session: session.Selectable;
    subject: subject.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    course_number: course_number.JSONSelectable;
    people: people.JSONSelectable;
    people_campus: people_campus.JSONSelectable;
    people_department: people_department.JSONSelectable;
    session: session.JSONSelectable;
    subject: subject.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    course_number: course_number.Whereable;
    people: people.Whereable;
    people_campus: people_campus.Whereable;
    people_department: people_department.Whereable;
    session: session.Whereable;
    subject: subject.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    course_number: course_number.Insertable;
    people: people.Insertable;
    people_campus: people_campus.Insertable;
    people_department: people_department.Insertable;
    session: session.Insertable;
    subject: subject.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    course_number: course_number.Updatable;
    people: people.Updatable;
    people_campus: people_campus.Updatable;
    people_department: people_department.Updatable;
    session: session.Updatable;
    subject: subject.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    course_number: course_number.UniqueIndex;
    people: people.UniqueIndex;
    people_campus: people_campus.UniqueIndex;
    people_department: people_department.UniqueIndex;
    session: session.UniqueIndex;
    subject: subject.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    course_number: course_number.Column;
    people: people.Column;
    people_campus: people_campus.Column;
    people_department: people_department.Column;
    session: session.Column;
    subject: subject.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    course_number: course_number.SQL;
    people: people.SQL;
    people_campus: people_campus.SQL;
    people_department: people_department.SQL;
    session: session.SQL;
    subject: subject.SQL;
  }[T];
}
