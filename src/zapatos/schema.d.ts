/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.6.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace course_info {
    export type Table = 'course_info';
    export interface Selectable {
      /**
      * **course_info.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject: string;
      /**
      * **course_info.number**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      number: string;
      /**
      * **course_info.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **course_info.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **course_info.attributes**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      attributes: string[];
    }
    export interface JSONSelectable {
      /**
      * **course_info.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject: string;
      /**
      * **course_info.number**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      number: string;
      /**
      * **course_info.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **course_info.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **course_info.attributes**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      attributes: string[];
    }
    export interface Whereable {
      /**
      * **course_info.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **course_info.number**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      number?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **course_info.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **course_info.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **course_info.attributes**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      attributes?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **course_info.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **course_info.number**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      number: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **course_info.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **course_info.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **course_info.attributes**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      attributes: string[] | db.Parameter<string[]> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **course_info.subject**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **course_info.number**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      number?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **course_info.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **course_info.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **course_info.attributes**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      attributes?: string[] | db.Parameter<string[]> | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment>;
    }
    export type UniqueIndex = 'course_info_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace course_number {
    export type Table = 'course_number';
    export interface Selectable {
      /**
      * **course_number.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **course_number.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **course_number.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **course_number.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **course_number.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'course_number_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace course_subject {
    export type Table = 'course_subject';
    export interface Selectable {
      /**
      * **course_subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **course_subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **course_subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **course_subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **course_subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'course_subject_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace people {
    export type Table = 'people';
    export interface Selectable {
      /**
      * **people.banner_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      banner_name: string;
      /**
      * **people.display_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_name: string;
      /**
      * **people.campus**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      campus: string;
      /**
      * **people.department**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      department: string;
      /**
      * **people.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **people.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **people.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string;
      /**
      * **people.extension**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      extension: string;
      /**
      * **people.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string;
      /**
      * **people.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **people.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
      */
      id: number;
    }
    export interface JSONSelectable {
      /**
      * **people.banner_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      banner_name: string;
      /**
      * **people.display_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_name: string;
      /**
      * **people.campus**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      campus: string;
      /**
      * **people.department**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      department: string;
      /**
      * **people.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **people.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **people.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string;
      /**
      * **people.extension**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      extension: string;
      /**
      * **people.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string;
      /**
      * **people.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **people.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
      */
      id: number;
    }
    export interface Whereable {
      /**
      * **people.banner_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      banner_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.display_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.campus**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      campus?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.department**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      department?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.extension**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      extension?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **people.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **people.banner_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      banner_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.display_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.campus**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      campus: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.department**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      department: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.extension**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      extension: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **people.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **people.banner_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      banner_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.display_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.campus**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      campus?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.department**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      department?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.extension**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      extension?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.location**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **people.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('people_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'people_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace people_campus {
    export type Table = 'people_campus';
    export interface Selectable {
      /**
      * **people_campus.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **people_campus.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **people_campus.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **people_campus.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **people_campus.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'campus_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace people_department {
    export type Table = 'people_department';
    export interface Selectable {
      /**
      * **people_department.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **people_department.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **people_department.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **people_department.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **people_department.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'department_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace room {
    export type Table = 'room';
    export interface Selectable {
      /**
      * **room.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **room.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **room.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **room.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **room.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'room_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace section {
    export type Table = 'section';
    export interface Selectable {
      /**
      * **section.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('section_id_seq'::regclass)`
      */
      id: number;
      /**
      * **section.sid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sid: string;
      /**
      * **section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string;
      /**
      * **section.crn**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      crn: number;
      /**
      * **section.schedule_type**
      * - `text` in database
      * - Nullable, no default
      */
      schedule_type: string | null;
      /**
      * **section.phone_one**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_one: string;
      /**
      * **section.phone_two**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_two: string;
      /**
      * **section.wait_list**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      wait_list: boolean;
      /**
      * **section.pre_check**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      pre_check: boolean;
      /**
      * **section.reserved**
      * - `text` in database
      * - Nullable, no default
      */
      reserved: string | null;
      /**
      * **section.attr**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attr: string;
      /**
      * **section.credit_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      credit_hours: number | null;
      /**
      * **section.billed_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      billed_hours: number | null;
      /**
      * **section.primary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      primary_instructor: number;
      /**
      * **section.secondary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      secondary_instructor: number;
    }
    export interface JSONSelectable {
      /**
      * **section.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('section_id_seq'::regclass)`
      */
      id: number;
      /**
      * **section.sid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sid: string;
      /**
      * **section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string;
      /**
      * **section.crn**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      crn: number;
      /**
      * **section.schedule_type**
      * - `text` in database
      * - Nullable, no default
      */
      schedule_type: string | null;
      /**
      * **section.phone_one**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_one: string;
      /**
      * **section.phone_two**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_two: string;
      /**
      * **section.wait_list**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      wait_list: boolean;
      /**
      * **section.pre_check**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      pre_check: boolean;
      /**
      * **section.reserved**
      * - `text` in database
      * - Nullable, no default
      */
      reserved: string | null;
      /**
      * **section.attr**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attr: string;
      /**
      * **section.credit_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      credit_hours: number | null;
      /**
      * **section.billed_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      billed_hours: number | null;
      /**
      * **section.primary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      primary_instructor: number;
      /**
      * **section.secondary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      secondary_instructor: number;
    }
    export interface Whereable {
      /**
      * **section.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('section_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.sid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.crn**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      crn?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.schedule_type**
      * - `text` in database
      * - Nullable, no default
      */
      schedule_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.phone_one**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_one?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.phone_two**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_two?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.wait_list**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      wait_list?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.pre_check**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      pre_check?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.reserved**
      * - `text` in database
      * - Nullable, no default
      */
      reserved?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.attr**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attr?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.credit_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      credit_hours?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.billed_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      billed_hours?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.primary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      primary_instructor?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **section.secondary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      secondary_instructor?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **section.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('section_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **section.sid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **section.crn**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      crn: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **section.schedule_type**
      * - `text` in database
      * - Nullable, no default
      */
      schedule_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **section.phone_one**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_one: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **section.phone_two**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_two: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **section.wait_list**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      wait_list: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **section.pre_check**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      pre_check: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **section.reserved**
      * - `text` in database
      * - Nullable, no default
      */
      reserved?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **section.attr**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attr: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **section.credit_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      credit_hours?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **section.billed_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      billed_hours?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **section.primary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      primary_instructor: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **section.secondary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      secondary_instructor: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **section.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('section_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **section.sid**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      sid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **section.section**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      section?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **section.crn**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      crn?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **section.schedule_type**
      * - `text` in database
      * - Nullable, no default
      */
      schedule_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **section.phone_one**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_one?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **section.phone_two**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      phone_two?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **section.wait_list**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      wait_list?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **section.pre_check**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      pre_check?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **section.reserved**
      * - `text` in database
      * - Nullable, no default
      */
      reserved?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **section.attr**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attr?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **section.credit_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      credit_hours?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **section.billed_hours**
      * - `int4` in database
      * - Nullable, no default
      */
      billed_hours?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **section.primary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      primary_instructor?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **section.secondary_instructor**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      secondary_instructor?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'section_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace semester {
    export type Table = 'semester';
    export interface Selectable {
      /**
      * **semester.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number;
      /**
      * **semester.term**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      term: number;
      /**
      * **semester.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level: number;
    }
    export interface JSONSelectable {
      /**
      * **semester.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number;
      /**
      * **semester.term**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      term: number;
      /**
      * **semester.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level: number;
    }
    export interface Whereable {
      /**
      * **semester.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **semester.term**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      term?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **semester.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **semester.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **semester.term**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      term: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **semester.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **semester.year**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      year?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **semester.term**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      term?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **semester.level**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      level?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'semester_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace session {
    export type Table = 'session';
    export interface Selectable {
      /**
      * **session.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **session.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **session.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **session.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **session.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'session_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace slot {
    export type Table = 'slot';
    export interface Selectable {
      /**
      * **slot.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('slot_id_seq'::regclass)`
      */
      id: number;
      /**
      * **slot.slot**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slot: string;
      /**
      * **slot.days**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      days: string[];
      /**
      * **slot.begin_time**
      * - `int4` in database
      * - Nullable, no default
      */
      begin_time: number | null;
      /**
      * **slot.end_time**
      * - `int4` in database
      * - Nullable, no default
      */
      end_time: number | null;
      /**
      * **slot.room**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      room: string;
      /**
      * **slot.section**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      section: number;
    }
    export interface JSONSelectable {
      /**
      * **slot.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('slot_id_seq'::regclass)`
      */
      id: number;
      /**
      * **slot.slot**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slot: string;
      /**
      * **slot.days**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      days: string[];
      /**
      * **slot.begin_time**
      * - `int4` in database
      * - Nullable, no default
      */
      begin_time: number | null;
      /**
      * **slot.end_time**
      * - `int4` in database
      * - Nullable, no default
      */
      end_time: number | null;
      /**
      * **slot.room**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      room: string;
      /**
      * **slot.section**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      section: number;
    }
    export interface Whereable {
      /**
      * **slot.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('slot_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot.slot**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slot?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot.days**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      days?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot.begin_time**
      * - `int4` in database
      * - Nullable, no default
      */
      begin_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot.end_time**
      * - `int4` in database
      * - Nullable, no default
      */
      end_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot.room**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      room?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **slot.section**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      section?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **slot.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('slot_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **slot.slot**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slot: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **slot.days**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      days: string[] | db.Parameter<string[]> | db.SQLFragment;
      /**
      * **slot.begin_time**
      * - `int4` in database
      * - Nullable, no default
      */
      begin_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **slot.end_time**
      * - `int4` in database
      * - Nullable, no default
      */
      end_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **slot.room**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      room: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **slot.section**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      section: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **slot.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('slot_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **slot.slot**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slot?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **slot.days**
      * - `_text` in database
      * - `NOT NULL`, no default
      */
      days?: string[] | db.Parameter<string[]> | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment>;
      /**
      * **slot.begin_time**
      * - `int4` in database
      * - Nullable, no default
      */
      begin_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **slot.end_time**
      * - `int4` in database
      * - Nullable, no default
      */
      end_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **slot.room**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      room?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **slot.section**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      section?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'slot_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace subject {
    export type Table = 'subject';
    export interface Selectable {
      /**
      * **subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **subject.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'subject_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = course_info.Table | course_number.Table | course_subject.Table | people.Table | people_campus.Table | people_department.Table | room.Table | section.Table | semester.Table | session.Table | slot.Table | subject.Table;
  export type Selectable = course_info.Selectable | course_number.Selectable | course_subject.Selectable | people.Selectable | people_campus.Selectable | people_department.Selectable | room.Selectable | section.Selectable | semester.Selectable | session.Selectable | slot.Selectable | subject.Selectable;
  export type JSONSelectable = course_info.JSONSelectable | course_number.JSONSelectable | course_subject.JSONSelectable | people.JSONSelectable | people_campus.JSONSelectable | people_department.JSONSelectable | room.JSONSelectable | section.JSONSelectable | semester.JSONSelectable | session.JSONSelectable | slot.JSONSelectable | subject.JSONSelectable;
  export type Whereable = course_info.Whereable | course_number.Whereable | course_subject.Whereable | people.Whereable | people_campus.Whereable | people_department.Whereable | room.Whereable | section.Whereable | semester.Whereable | session.Whereable | slot.Whereable | subject.Whereable;
  export type Insertable = course_info.Insertable | course_number.Insertable | course_subject.Insertable | people.Insertable | people_campus.Insertable | people_department.Insertable | room.Insertable | section.Insertable | semester.Insertable | session.Insertable | slot.Insertable | subject.Insertable;
  export type Updatable = course_info.Updatable | course_number.Updatable | course_subject.Updatable | people.Updatable | people_campus.Updatable | people_department.Updatable | room.Updatable | section.Updatable | semester.Updatable | session.Updatable | slot.Updatable | subject.Updatable;
  export type UniqueIndex = course_info.UniqueIndex | course_number.UniqueIndex | course_subject.UniqueIndex | people.UniqueIndex | people_campus.UniqueIndex | people_department.UniqueIndex | room.UniqueIndex | section.UniqueIndex | semester.UniqueIndex | session.UniqueIndex | slot.UniqueIndex | subject.UniqueIndex;
  export type Column = course_info.Column | course_number.Column | course_subject.Column | people.Column | people_campus.Column | people_department.Column | room.Column | section.Column | semester.Column | session.Column | slot.Column | subject.Column;
  export type AllTables = [course_info.Table, course_number.Table, course_subject.Table, people.Table, people_campus.Table, people_department.Table, room.Table, section.Table, semester.Table, session.Table, slot.Table, subject.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    course_info: course_info.Selectable;
    course_number: course_number.Selectable;
    course_subject: course_subject.Selectable;
    people: people.Selectable;
    people_campus: people_campus.Selectable;
    people_department: people_department.Selectable;
    room: room.Selectable;
    section: section.Selectable;
    semester: semester.Selectable;
    session: session.Selectable;
    slot: slot.Selectable;
    subject: subject.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    course_info: course_info.JSONSelectable;
    course_number: course_number.JSONSelectable;
    course_subject: course_subject.JSONSelectable;
    people: people.JSONSelectable;
    people_campus: people_campus.JSONSelectable;
    people_department: people_department.JSONSelectable;
    room: room.JSONSelectable;
    section: section.JSONSelectable;
    semester: semester.JSONSelectable;
    session: session.JSONSelectable;
    slot: slot.JSONSelectable;
    subject: subject.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    course_info: course_info.Whereable;
    course_number: course_number.Whereable;
    course_subject: course_subject.Whereable;
    people: people.Whereable;
    people_campus: people_campus.Whereable;
    people_department: people_department.Whereable;
    room: room.Whereable;
    section: section.Whereable;
    semester: semester.Whereable;
    session: session.Whereable;
    slot: slot.Whereable;
    subject: subject.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    course_info: course_info.Insertable;
    course_number: course_number.Insertable;
    course_subject: course_subject.Insertable;
    people: people.Insertable;
    people_campus: people_campus.Insertable;
    people_department: people_department.Insertable;
    room: room.Insertable;
    section: section.Insertable;
    semester: semester.Insertable;
    session: session.Insertable;
    slot: slot.Insertable;
    subject: subject.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    course_info: course_info.Updatable;
    course_number: course_number.Updatable;
    course_subject: course_subject.Updatable;
    people: people.Updatable;
    people_campus: people_campus.Updatable;
    people_department: people_department.Updatable;
    room: room.Updatable;
    section: section.Updatable;
    semester: semester.Updatable;
    session: session.Updatable;
    slot: slot.Updatable;
    subject: subject.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    course_info: course_info.UniqueIndex;
    course_number: course_number.UniqueIndex;
    course_subject: course_subject.UniqueIndex;
    people: people.UniqueIndex;
    people_campus: people_campus.UniqueIndex;
    people_department: people_department.UniqueIndex;
    room: room.UniqueIndex;
    section: section.UniqueIndex;
    semester: semester.UniqueIndex;
    session: session.UniqueIndex;
    slot: slot.UniqueIndex;
    subject: subject.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    course_info: course_info.Column;
    course_number: course_number.Column;
    course_subject: course_subject.Column;
    people: people.Column;
    people_campus: people_campus.Column;
    people_department: people_department.Column;
    room: room.Column;
    section: section.Column;
    semester: semester.Column;
    session: session.Column;
    slot: slot.Column;
    subject: subject.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    course_info: course_info.SQL;
    course_number: course_number.SQL;
    course_subject: course_subject.SQL;
    people: people.SQL;
    people_campus: people_campus.SQL;
    people_department: people_department.SQL;
    room: room.SQL;
    section: section.SQL;
    semester: semester.SQL;
    session: session.SQL;
    slot: slot.SQL;
    subject: subject.SQL;
  }[T];

}
